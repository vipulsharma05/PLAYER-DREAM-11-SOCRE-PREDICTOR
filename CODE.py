{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c8b6a83",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "A match prediction on a cricket game adds and creates interest for a fan watching a cricket match. Apart from having fun while watching a game, it helps people to come up with their Dream XI team. By keeping in mind the factors relating to the prediction the model predicts the performance of an individual player.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "091be3db",
   "metadata": {},
   "source": [
    "# Cricket player performance prediction\n",
    "\n",
    "Cricket player performance prediction is a model which can predict the runs made by a batsman with certain number of balls faced and within a certain over. It consists of a dataset with of players with their past performance records. The model simply analyses the past performance of that certain player along with the other attributes and returns a predicted value.\n",
    "\n",
    "In order to predict it requries certain input such as player name and the opposition team name, then it will ask for the number of balls that player might face within a span of certain over (i.e 50 or within). \n",
    "\n",
    "This uses Multiple Regression Method (Supervised Learning) where the data is tested and train, later used for prediction. Unlike Unsupervised here data has a label and it is trained according to that. They are divided into dependent variables and independent variables , where dependent is basically the label that we are trying to predict and independ variables are the other features. We can use different regressors and choose the most accurate regression to predict the accurate output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a77af35",
   "metadata": {},
   "source": [
    "# Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2e1ed41c-c3fe-49c1-9226-2f106f611083",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sea\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0c2a434e-85fd-4035-91d3-63d85679dc2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Country</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Bat1</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Ground</th>\n",
       "      <th>Start Date</th>\n",
       "      <th>Match_ID</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>India</td>\n",
       "      <td>0*</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dhaka</td>\n",
       "      <td>10 Jan 2010</td>\n",
       "      <td>ODI # 2941</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>England</td>\n",
       "      <td>1*</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>33.33</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Nottingham</td>\n",
       "      <td>6 Jul 2011</td>\n",
       "      <td>ODI # 3169</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Australia</td>\n",
       "      <td>0*</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Pallekele</td>\n",
       "      <td>10 Aug 2011</td>\n",
       "      <td>ODI # 3175</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dubai (DSC)</td>\n",
       "      <td>11 Nov 2011</td>\n",
       "      <td>ODI # 3212</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dhaka</td>\n",
       "      <td>15 Mar 2012</td>\n",
       "      <td>ODI # 3260</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8813</th>\n",
       "      <td>11143</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>0*</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>23 Sep 2018</td>\n",
       "      <td>ODI # 4045</td>\n",
       "      <td>249/7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.98</td>\n",
       "      <td>1.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>11144</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>India</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Dubai (DSC)</td>\n",
       "      <td>25 Sep 2018</td>\n",
       "      <td>ODI # 4046</td>\n",
       "      <td>252</td>\n",
       "      <td>253.0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>5.05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>tied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>11145</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Dehradun</td>\n",
       "      <td>28 Feb 2019</td>\n",
       "      <td>ODI # 4100</td>\n",
       "      <td>165/5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>3.94</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8816</th>\n",
       "      <td>11146</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>50.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dehradun</td>\n",
       "      <td>2 Mar 2019</td>\n",
       "      <td>ODI # 4101</td>\n",
       "      <td>250/7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.3</td>\n",
       "      <td>5.15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>n/r</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8817</th>\n",
       "      <td>11147</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>12.50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dehradun</td>\n",
       "      <td>8 Mar 2019</td>\n",
       "      <td>ODI # 4108</td>\n",
       "      <td>223</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.1</td>\n",
       "      <td>4.53</td>\n",
       "      <td>1.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8818 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         ID  Player_ID          Player      Country  Opposition Bat1  Runs  \\\n",
       "0         6      49619   Oshane Thomas   WestIndies       India   0*     0   \n",
       "1        10      49619   Oshane Thomas   WestIndies     England   1*     1   \n",
       "2        11      49619   Oshane Thomas   WestIndies   Australia   0*     0   \n",
       "3        12      49619   Oshane Thomas   WestIndies    Pakistan    0     0   \n",
       "4        14      49619   Oshane Thomas   WestIndies    Pakistan    0     0   \n",
       "...     ...        ...             ...          ...         ...  ...   ...   \n",
       "8813  11143     352048  Gulbadin Naib   Afghanistan  Bangladesh   0*     0   \n",
       "8814  11144     352048  Gulbadin Naib   Afghanistan       India   15    15   \n",
       "8815  11145     352048  Gulbadin Naib   Afghanistan     Ireland   46    46   \n",
       "8816  11146     352048  Gulbadin Naib   Afghanistan     Ireland    3     3   \n",
       "8817  11147     352048  Gulbadin Naib   Afghanistan     Ireland    1     1   \n",
       "\n",
       "      BF     SR  4s  6s       Ground   Start Date    Match_ID Team Runs  \\\n",
       "0      8   0.00   0   0        Dhaka  10 Jan 2010  ODI # 2941       NaN   \n",
       "1      3  33.33   0   0   Nottingham   6 Jul 2011  ODI # 3169       NaN   \n",
       "2      2   0.00   0   0    Pallekele  10 Aug 2011  ODI # 3175       NaN   \n",
       "3      2   0.00   0   0  Dubai (DSC)  11 Nov 2011  ODI # 3212       NaN   \n",
       "4      4   0.00   0   0        Dhaka  15 Mar 2012  ODI # 3260       NaN   \n",
       "...   ..    ...  ..  ..          ...          ...         ...       ...   \n",
       "8813   2   0.00   0   0    Abu Dhabi  23 Sep 2018  ODI # 4045     249/7   \n",
       "8814  46  32.60   1   0  Dubai (DSC)  25 Sep 2018  ODI # 4046       252   \n",
       "8815  61  75.40   6   1     Dehradun  28 Feb 2019  ODI # 4100     165/5   \n",
       "8816   6  50.00   0   0     Dehradun   2 Mar 2019  ODI # 4101     250/7   \n",
       "8817   8  12.50   0   0     Dehradun   8 Mar 2019  ODI # 4108       223   \n",
       "\n",
       "      Target  Overs   RPO  Inns Result  \n",
       "0        NaN    NaN   NaN   NaN    NaN  \n",
       "1        NaN    NaN   NaN   NaN    NaN  \n",
       "2        NaN    NaN   NaN   NaN    NaN  \n",
       "3        NaN    NaN   NaN   NaN    NaN  \n",
       "4        NaN    NaN   NaN   NaN    NaN  \n",
       "...      ...    ...   ...   ...    ...  \n",
       "8813     NaN   50.0  4.98   1.0    won  \n",
       "8814   253.0   49.5  5.05   2.0   tied  \n",
       "8815   162.0   41.5  3.94   2.0    won  \n",
       "8816     NaN   48.3  5.15   1.0    n/r  \n",
       "8817     NaN   49.1  4.53   1.0    won  \n",
       "\n",
       "[8818 rows x 20 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br = pd.read_csv('C:/Users/varshithbr/Desktop/python projects/Cricket Player Prediction/newplayer.csv')\n",
    "br['Opposition'] = br['Opposition'].str.replace('v ','')\n",
    "br\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda27d54",
   "metadata": {},
   "source": [
    "# Data cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e6ccfbaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID               0\n",
       "Player_ID        0\n",
       "Player           0\n",
       "Country          0\n",
       "Opposition       0\n",
       "Bat1             0\n",
       "Runs             0\n",
       "BF               0\n",
       "SR               0\n",
       "4s               0\n",
       "6s               0\n",
       "Ground           0\n",
       "Start Date       0\n",
       "Match_ID         0\n",
       "Team Runs     2626\n",
       "Target        5732\n",
       "Overs         2626\n",
       "RPO           2626\n",
       "Inns          2626\n",
       "Result        2626\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45dbfaa9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dc539793-732f-44ad-b866-3b0ff62f0d9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "br.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e6820ef1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID            0\n",
       "Player_ID     0\n",
       "Player        0\n",
       "Country       0\n",
       "Opposition    0\n",
       "Bat1          0\n",
       "Runs          0\n",
       "BF            0\n",
       "SR            0\n",
       "4s            0\n",
       "6s            0\n",
       "Ground        0\n",
       "Start Date    0\n",
       "Match_ID      0\n",
       "Team Runs     0\n",
       "Target        0\n",
       "Overs         0\n",
       "RPO           0\n",
       "Inns          0\n",
       "Result        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78a8e406",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "ebddddcd-c020-4656-bdfd-59f547afd865",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Country</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Bat1</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Ground</th>\n",
       "      <th>Start Date</th>\n",
       "      <th>Match_ID</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>18</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>1*</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Sharjah</td>\n",
       "      <td>18 Dec 2013</td>\n",
       "      <td>ODI # 3445</td>\n",
       "      <td>311</td>\n",
       "      <td>323.0</td>\n",
       "      <td>49.4</td>\n",
       "      <td>6.26</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>27</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>England</td>\n",
       "      <td>4*</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>The Oval</td>\n",
       "      <td>22 May 2014</td>\n",
       "      <td>ODI # 3492</td>\n",
       "      <td>144</td>\n",
       "      <td>226.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>5.17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dunedin</td>\n",
       "      <td>23 Jan 2015</td>\n",
       "      <td>ODI # 3588</td>\n",
       "      <td>252</td>\n",
       "      <td>361.0</td>\n",
       "      <td>43.4</td>\n",
       "      <td>5.77</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>31</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>60.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dunedin</td>\n",
       "      <td>25 Jan 2015</td>\n",
       "      <td>ODI # 3590</td>\n",
       "      <td>195</td>\n",
       "      <td>316.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>4.81</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>32</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>7*</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Christchurch</td>\n",
       "      <td>14 Feb 2015</td>\n",
       "      <td>ODI # 3599</td>\n",
       "      <td>233</td>\n",
       "      <td>332.0</td>\n",
       "      <td>46.1</td>\n",
       "      <td>5.04</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>11140</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>17 Sep 2018</td>\n",
       "      <td>ODI # 4038</td>\n",
       "      <td>158</td>\n",
       "      <td>250.0</td>\n",
       "      <td>41.2</td>\n",
       "      <td>3.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>11141</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>42*</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>110.52</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>20 Sep 2018</td>\n",
       "      <td>ODI # 4041</td>\n",
       "      <td>119</td>\n",
       "      <td>256.0</td>\n",
       "      <td>42.1</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>11142</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>10*</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>142.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>21 Sep 2018</td>\n",
       "      <td>ODI # 4043</td>\n",
       "      <td>258/7</td>\n",
       "      <td>258.0</td>\n",
       "      <td>49.3</td>\n",
       "      <td>5.21</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>11144</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>India</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Dubai (DSC)</td>\n",
       "      <td>25 Sep 2018</td>\n",
       "      <td>ODI # 4046</td>\n",
       "      <td>252</td>\n",
       "      <td>253.0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>5.05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>tied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>11145</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Dehradun</td>\n",
       "      <td>28 Feb 2019</td>\n",
       "      <td>ODI # 4100</td>\n",
       "      <td>165/5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>3.94</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3086 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         ID  Player_ID          Player      Country   Opposition Bat1  Runs  \\\n",
       "7        18      49619   Oshane Thomas   WestIndies     Pakistan   1*     1   \n",
       "9        27      49619   Oshane Thomas   WestIndies      England   4*     4   \n",
       "10       30      49619   Oshane Thomas   WestIndies  New Zealand    0     0   \n",
       "11       31      49619   Oshane Thomas   WestIndies  New Zealand    3     3   \n",
       "12       32      49619   Oshane Thomas   WestIndies  New Zealand   7*     7   \n",
       "...     ...        ...             ...          ...          ...  ...   ...   \n",
       "8810  11140     352048  Gulbadin Naib   Afghanistan    Sri Lanka    4     4   \n",
       "8811  11141     352048  Gulbadin Naib   Afghanistan   Bangladesh  42*    42   \n",
       "8812  11142     352048  Gulbadin Naib   Afghanistan     Pakistan  10*    10   \n",
       "8814  11144     352048  Gulbadin Naib   Afghanistan        India   15    15   \n",
       "8815  11145     352048  Gulbadin Naib   Afghanistan      Ireland   46    46   \n",
       "\n",
       "      BF      SR  4s  6s        Ground   Start Date    Match_ID Team Runs  \\\n",
       "7      1  100.00   0   0       Sharjah  18 Dec 2013  ODI # 3445       311   \n",
       "9      5   80.00   0   0      The Oval  22 May 2014  ODI # 3492       144   \n",
       "10     3    0.00   0   0       Dunedin  23 Jan 2015  ODI # 3588       252   \n",
       "11     5   60.00   0   0       Dunedin  25 Jan 2015  ODI # 3590       195   \n",
       "12    17   41.17   0   0  Christchurch  14 Feb 2015  ODI # 3599       233   \n",
       "...   ..     ...  ..  ..           ...          ...         ...       ...   \n",
       "8810   5   80.00   0   0     Abu Dhabi  17 Sep 2018  ODI # 4038       158   \n",
       "8811  38  110.52   5   0     Abu Dhabi  20 Sep 2018  ODI # 4041       119   \n",
       "8812   7  142.85   1   0     Abu Dhabi  21 Sep 2018  ODI # 4043     258/7   \n",
       "8814  46   32.60   1   0   Dubai (DSC)  25 Sep 2018  ODI # 4046       252   \n",
       "8815  61   75.40   6   1      Dehradun  28 Feb 2019  ODI # 4100     165/5   \n",
       "\n",
       "      Target  Overs   RPO  Inns Result  \n",
       "7      323.0   49.4  6.26   2.0   lost  \n",
       "9      226.0   27.5  5.17   2.0   lost  \n",
       "10     361.0   43.4  5.77   2.0   lost  \n",
       "11     316.0   40.3  4.81   2.0   lost  \n",
       "12     332.0   46.1  5.04   2.0   lost  \n",
       "...      ...    ...   ...   ...    ...  \n",
       "8810   250.0   41.2  3.82   2.0   lost  \n",
       "8811   256.0   42.1  2.82   2.0   lost  \n",
       "8812   258.0   49.3  5.21   2.0    won  \n",
       "8814   253.0   49.5  5.05   2.0   tied  \n",
       "8815   162.0   41.5  3.94   2.0    won  \n",
       "\n",
       "[3086 rows x 20 columns]"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "96f2d4c6-3fd4-4b5e-9d16-04939839b746",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>Inns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3.086000e+03</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.000000</td>\n",
       "      <td>3086.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5813.602074</td>\n",
       "      <td>2.539303e+05</td>\n",
       "      <td>30.366818</td>\n",
       "      <td>33.863253</td>\n",
       "      <td>82.964332</td>\n",
       "      <td>2.786455</td>\n",
       "      <td>0.604990</td>\n",
       "      <td>266.442320</td>\n",
       "      <td>42.007323</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3153.114936</td>\n",
       "      <td>1.889530e+05</td>\n",
       "      <td>33.430199</td>\n",
       "      <td>32.897672</td>\n",
       "      <td>51.638874</td>\n",
       "      <td>3.384409</td>\n",
       "      <td>1.261252</td>\n",
       "      <td>66.641748</td>\n",
       "      <td>8.760664</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>5.334000e+03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3113.250000</td>\n",
       "      <td>4.975800e+04</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>53.330000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>227.000000</td>\n",
       "      <td>39.100000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5961.500000</td>\n",
       "      <td>2.707495e+05</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>44.500000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8329.750000</td>\n",
       "      <td>3.481440e+05</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>104.812500</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>311.000000</td>\n",
       "      <td>48.500000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>11145.000000</td>\n",
       "      <td>1.158100e+06</td>\n",
       "      <td>264.000000</td>\n",
       "      <td>173.000000</td>\n",
       "      <td>460.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>445.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ID     Player_ID         Runs           BF           SR  \\\n",
       "count   3086.000000  3.086000e+03  3086.000000  3086.000000  3086.000000   \n",
       "mean    5813.602074  2.539303e+05    30.366818    33.863253    82.964332   \n",
       "std     3153.114936  1.889530e+05    33.430199    32.897672    51.638874   \n",
       "min       18.000000  5.334000e+03     0.000000     1.000000     0.000000   \n",
       "25%     3113.250000  4.975800e+04     6.000000     9.000000    53.330000   \n",
       "50%     5961.500000  2.707495e+05    19.000000    23.000000    80.000000   \n",
       "75%     8329.750000  3.481440e+05    44.000000    49.000000   104.812500   \n",
       "max    11145.000000  1.158100e+06   264.000000   173.000000   460.000000   \n",
       "\n",
       "                4s           6s       Target        Overs    Inns  \n",
       "count  3086.000000  3086.000000  3086.000000  3086.000000  3086.0  \n",
       "mean      2.786455     0.604990   266.442320    42.007323     2.0  \n",
       "std       3.384409     1.261252    66.641748     8.760664     0.0  \n",
       "min       0.000000     0.000000    68.000000     3.200000     2.0  \n",
       "25%       0.000000     0.000000   227.000000    39.100000     2.0  \n",
       "50%       2.000000     0.000000   270.000000    44.500000     2.0  \n",
       "75%       4.000000     1.000000   311.000000    48.500000     2.0  \n",
       "max      33.000000    14.000000   445.000000    50.000000     2.0  "
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a8bc7e",
   "metadata": {},
   "source": [
    "# Teams which played most matches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "59e3df68-29aa-4606-ae7b-7bc0ae54e25a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,15))\n",
    "sea.countplot(x='Country',data=br)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3681678a",
   "metadata": {},
   "source": [
    "# Result count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b6f1798-8ae3-4669-a18e-3abb5b13c2ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Result', ylabel='count'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.countplot(x='Result', data=br)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "b46ba17b-13f1-4b44-a8ca-3be1246d7c28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Country</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Bat1</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Ground</th>\n",
       "      <th>Start Date</th>\n",
       "      <th>Match_ID</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>121</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Australia</td>\n",
       "      <td>43</td>\n",
       "      <td>43</td>\n",
       "      <td>31</td>\n",
       "      <td>138.70</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Canberra</td>\n",
       "      <td>6 Feb 2013</td>\n",
       "      <td>ODI # 3332</td>\n",
       "      <td>290</td>\n",
       "      <td>330.0</td>\n",
       "      <td>47.3</td>\n",
       "      <td>6.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>127</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>India</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>66.66</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>11 Oct 2014</td>\n",
       "      <td>ODI # 3533</td>\n",
       "      <td>215</td>\n",
       "      <td>264.0</td>\n",
       "      <td>46.3</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>128</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>India</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>23</td>\n",
       "      <td>200.00</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>Dharamsala</td>\n",
       "      <td>17 Oct 2014</td>\n",
       "      <td>ODI # 3535</td>\n",
       "      <td>271</td>\n",
       "      <td>331.0</td>\n",
       "      <td>48.1</td>\n",
       "      <td>5.62</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>129</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>8</td>\n",
       "      <td>237.50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Durban</td>\n",
       "      <td>16 Jan 2015</td>\n",
       "      <td>ODI # 3579</td>\n",
       "      <td>164</td>\n",
       "      <td>226.0</td>\n",
       "      <td>28.2</td>\n",
       "      <td>5.78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>130</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Johannesburg</td>\n",
       "      <td>18 Jan 2015</td>\n",
       "      <td>ODI # 3583</td>\n",
       "      <td>291/7</td>\n",
       "      <td>440.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>5.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>133</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>200.00</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Centurion</td>\n",
       "      <td>28 Jan 2015</td>\n",
       "      <td>ODI # 3593</td>\n",
       "      <td>230</td>\n",
       "      <td>362.0</td>\n",
       "      <td>37.4</td>\n",
       "      <td>6.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>137</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>27 Feb 2015</td>\n",
       "      <td>ODI # 3616</td>\n",
       "      <td>151</td>\n",
       "      <td>409.0</td>\n",
       "      <td>33.1</td>\n",
       "      <td>4.55</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>140</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>11</td>\n",
       "      <td>181.81</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Wellington</td>\n",
       "      <td>21 Mar 2015</td>\n",
       "      <td>ODI # 3643</td>\n",
       "      <td>250</td>\n",
       "      <td>394.0</td>\n",
       "      <td>30.3</td>\n",
       "      <td>8.19</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>142</td>\n",
       "      <td>276298</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>108.33</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Providence</td>\n",
       "      <td>22 Jul 2018</td>\n",
       "      <td>ODI # 4022</td>\n",
       "      <td>231/9</td>\n",
       "      <td>280.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ID  Player_ID         Player     Country    Opposition Bat1  Runs  BF  \\\n",
       "69  121     276298  Andre Russell  WestIndies     Australia   43    43  31   \n",
       "74  127     276298  Andre Russell  WestIndies         India    4     4   6   \n",
       "75  128     276298  Andre Russell  WestIndies         India   46    46  23   \n",
       "76  129     276298  Andre Russell  WestIndies  South Africa   19    19   8   \n",
       "77  130     276298  Andre Russell  WestIndies  South Africa    0     0   1   \n",
       "80  133     276298  Andre Russell  WestIndies  South Africa   24    24  12   \n",
       "83  137     276298  Andre Russell  WestIndies  South Africa    0     0   3   \n",
       "86  140     276298  Andre Russell  WestIndies   New Zealand   20    20  11   \n",
       "88  142     276298  Andre Russell  WestIndies    Bangladesh   13    13  12   \n",
       "\n",
       "        SR  4s  6s        Ground   Start Date    Match_ID Team Runs  Target  \\\n",
       "69  138.70   6   1      Canberra   6 Feb 2013  ODI # 3332       290   330.0   \n",
       "74   66.66   0   0         Delhi  11 Oct 2014  ODI # 3533       215   264.0   \n",
       "75  200.00   6   3    Dharamsala  17 Oct 2014  ODI # 3535       271   331.0   \n",
       "76  237.50   1   2        Durban  16 Jan 2015  ODI # 3579       164   226.0   \n",
       "77    0.00   0   0  Johannesburg  18 Jan 2015  ODI # 3583     291/7   440.0   \n",
       "80  200.00   4   1     Centurion  28 Jan 2015  ODI # 3593       230   362.0   \n",
       "83    0.00   0   0        Sydney  27 Feb 2015  ODI # 3616       151   409.0   \n",
       "86  181.81   1   2    Wellington  21 Mar 2015  ODI # 3643       250   394.0   \n",
       "88  108.33   1   1    Providence  22 Jul 2018  ODI # 4022     231/9   280.0   \n",
       "\n",
       "    Overs   RPO  Inns Result  \n",
       "69   47.3   6.1   2.0   lost  \n",
       "74   46.3  4.62   2.0   lost  \n",
       "75   48.1  5.62   2.0   lost  \n",
       "76   28.2  5.78   2.0   lost  \n",
       "77   50.0  5.82   2.0   lost  \n",
       "80   37.4   6.1   2.0   lost  \n",
       "83   33.1  4.55   2.0   lost  \n",
       "86   30.3  8.19   2.0   lost  \n",
       "88   50.0  4.62   2.0   lost  "
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new=br.loc[(br['Result']=='lost')& (br['Player']=='Andre Russell')]\n",
    "new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "d9b0187a-2fd1-405b-92aa-2c925858654b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['WestIndies', 'SriLanka', 'SouthAfrica', 'Pakistan', 'NewZealand',\n",
       "       'India', 'England', 'Bangladesh', 'Australia', 'Afghanistan'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=br['Country'].unique()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "6031d458-e513-4bf1-b566-a94c509a9376",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=br.loc[br['Runs'] > 150 ]\n",
    "\n",
    "arrnp = v['Player'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "50e52d3d-5bb8-4d96-bb07-1e73d1bc7b46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Chris Gayle ', 'Hashim Amla', 'Hashim Amla', 'Quinton de Kock ', 'Quinton de Kock ', 'Faf du Plessis ', 'Ross Taylor', 'Martin Guptill', 'Rohit Sharma ', 'Rohit Sharma ', 'Rohit Sharma ', 'Virat Kohli ', 'Virat Kohli ', 'Jason Roy', 'Alex Hales', 'David Warner', 'David Warner', 'Steve Smith']\n",
      "[162, 153, 154, 178, 168, 185, 181, 237, 264, 208, 162, 160, 157, 180, 171, 156, 179, 164]\n"
     ]
    }
   ],
   "source": [
    "runs = v['Runs'].tolist()\n",
    "runs\n",
    "\n",
    "players = v['Player'].tolist()\n",
    "\n",
    "print(players)\n",
    "\n",
    "print(runs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c3fa8e",
   "metadata": {},
   "source": [
    "# Highest run scorer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "6fe32dd5-bbf6-405d-804d-f47da354ed05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.barplot(y=players, x=runs, data=v)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c53753",
   "metadata": {},
   "source": [
    "\n",
    "According to the above plot, Martin Guptill is the highest run scorer, followed by Rohit Sharma\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "f183619c-d8e3-47bc-989e-dd45de9cd141",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['WestIndies', 'SriLanka', 'SouthAfrica', 'Pakistan', 'NewZealand',\n",
       "       'India', 'England', 'Bangladesh', 'Australia', 'Afghanistan'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=br['Country'].unique()\n",
    "countries =c.tolist()\n",
    "# countries\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6353b424",
   "metadata": {},
   "source": [
    "# Teams which won most matches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "c901972f-e450-41f4-a4d1-44fcc5efc707",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "won = br.loc[br['Result']=='won']\n",
    "wi= br.loc[(br['Result']=='won') & (br['Country']=='WestIndies') ]\n",
    "sri = br.loc[(br['Result']=='won') & (br['Country']=='SriLanka') ]\n",
    "south = br.loc[(br['Result']=='won') & (br['Country']=='SouthAfrica') ]\n",
    "pak = br.loc[(br['Result']=='won') & (br['Country']=='Pakistan') ]\n",
    "newz = br.loc[(br['Result']=='won') & (br['Country']=='NewZealand') ]\n",
    "ind = br.loc[(br['Result']=='won') & (br['Country']=='India') ]\n",
    "eng =  br.loc[(br['Result']=='won') & (br['Country']=='England') ]\n",
    "bang= br.loc[(br['Result']=='won') & (br['Country']=='Bangladesh') ]\n",
    "aust = br.loc[(br['Result']=='won') & (br['Country']=='Australia') ]\n",
    "afgh= br.loc[(br['Result']=='won') & (br['Country']=='Australia') ]\n",
    "\n",
    "\n",
    "woncount=[wi['Result'].count(),sri['Result'].count(),south['Result'].count(),pak['Result'].count(),\\\n",
    "           newz['Result'].count(),ind['Result'].count(),eng['Result'].count(),bang['Result'].count(),aust['Result'].count(),afgh['Result'].count(),]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "d5b8c81f-8e21-44fb-8c5a-9d324ae462c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.barplot(y=countries, x=woncount, data=won)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97d7f4c7",
   "metadata": {},
   "source": [
    "# which which lost most matches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "cc4c6b71-853c-4928-a6b8-1da08dfbedd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "lost = br.loc[br['Result']=='lost']\n",
    "wi= br.loc[(br['Result']=='lost') & (br['Country']=='WestIndies') ]\n",
    "sri = br.loc[(br['Result']=='lost') & (br['Country']=='SriLanka') ]\n",
    "south = br.loc[(br['Result']=='lost') & (br['Country']=='SouthAfrica') ]\n",
    "pak = br.loc[(br['Result']=='lost') & (br['Country']=='Pakistan') ]\n",
    "newz = br.loc[(br['Result']=='lost') & (br['Country']=='NewZealand') ]\n",
    "ind = br.loc[(br['Result']=='lost') & (br['Country']=='India') ]\n",
    "eng =  br.loc[(br['Result']=='lost') & (br['Country']=='England') ]\n",
    "bang= br.loc[(br['Result']=='lost') & (br['Country']=='Bangladesh') ]\n",
    "aust = br.loc[(br['Result']=='lost') & (br['Country']=='Australia') ]\n",
    "afgh= br.loc[(br['Result']=='lost') & (br['Country']=='Australia') ]\n",
    "\n",
    "\n",
    "lostcount=[wi['Result'].count(),sri['Result'].count(),south['Result'].count(),pak['Result'].count(),\\\n",
    "           newz['Result'].count(),ind['Result'].count(),eng['Result'].count(),bang['Result'].count(),aust['Result'].count(),afgh['Result'].count(),]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "eb35d06e-17d3-4d92-85ce-43d07eb0d9ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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H35QYGCgevTooZMnT1q1mzVrlgYOHKi9e/eqR48eGjp0qE6cOHHJeDk5OeratauKi4u1adMmeXh46OzZs2rRooW+/vpr/ec//9Ho0aM1fPhw7dixo8S6CgoKlJeXZ7UAAIDyqdQGMjs7O0VHRysmJkYeHh5q3769nn/+ee3du9eq3cMPP6xHH31U/v7+8vX1ve79dO7cWcOGDVO9evVUv359LVq0SKdPn1ZCQoJVu7CwMA0ZMkQBAQF65ZVXlJ+ff0mgOnbsmDp27Chvb2999dVXcnJykiTVrFlT4eHhatq0qfz9/fXkk08qNDRUq1atKrGuyMhIubu7WxYfH5/rPjYAAFA2lNpAJl24h+z333/XunXrFBoaqvj4eDVv3lzR0dGWNi1btrypffzxxx8aNWqUAgMD5e7uLjc3N+Xn5ysjI8OqXVBQkOVnZ2dnubm56fjx41ZtunbtqoCAAK1cuVIVKlSwrD9//rxmz56txo0by9PTUy4uLtq4ceMl+/i7iIgI5ebmWpbMzMybOk4AAFB6lepAJkkVK1ZU165dNX36dCUmJiosLEwzZsywbHd2dr6p8UeMGKHU1FRFRUUpMTFRqampqly5sgoLC63a2dvbW702mUwqLi62WtezZ099//332r9/v9X6119/XVFRUXr22We1ZcsWpaamqlu3bpfs4+8cHBzk5uZmtQAAgPKpVH/K8nIaNGigtWvX3rLxtm/frnfffVc9evSQJGVmZup///vfDY316quvysXFRV26dFF8fLwaNGhg2UefPn00bNgwSVJxcbEOHjxo2Q4AAO5upTaQZWdn66GHHtJjjz2moKAgubq6ateuXXrttdfUp0+f6x5v3759cnV1tbw2mUxq0qSJAgMD9dFHH6lly5bKy8vTM888I0dHxxuue+7cuTp//rw6d+6s+Ph41atXT4GBgfrss8+UmJioSpUqaf78+frjjz8IZAAAQFIpDmQuLi5q06aNFixYoPT0dBUVFcnHx0ejRo3S888/f93jdejQweq1ra2tzp07pyVLlmj06NFq3ry5fHx89Morryg8PPymal+wYIFVKJs2bZp+/fVXdevWTU5OTho9erT69u2r3Nzcm9oPAAAoH0xms9lsdBG4ury8PLm7u+s/EfXlWtHW6HIAoNzzfWGf0SWgHLj49zs3N/eK94OX+pv6AQAAyjsCGQAA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Iisr65IlKSlJLi4uGj9+/B2pAQAA4Ha67kAWEhIiLy8vRUZGlthm27Ztuu++++To6CgfHx9NnDhRp06dkiS9/fbbatSokaXtxdm1hQsXWu1j2rRpkiQvLy+rxc3NTU888YRatmxpdXkxJydHjz/+uKpWrSo3Nzd17txZe/bssWxPT09Xnz59VL16dbm4uKhVq1bavHnzFY91/vz5aty4sZydneXj46Nx48YpPz/fsj06OloeHh7auHGj6tevLxcXF4WGhiorK8vS5vz585o8ebI8PDxUuXJlTZkyRWaz+SrvMgAAuJtcdyCztbXVK6+8orfeeku//fbbJdvT09MVGhqqAQMGaO/evVq5cqW2bdumCRMmSJI6duyo/fv3688//5QkJSQkqEqVKoqPj5ckFRUVKSkpSZ06dbrs/h999FHl5uZq9erVsrOzs6x/6KGHdPz4cX3zzTdKSUlR8+bN1aVLF504cUKSlJ+frx49eiguLk67d+9WaGioevfurYyMjJLfHBsbvfnmm/rpp58UExOj7777TlOmTLFqc/r0ac2dO1cfffSRvv/+e2VkZCg8PNyyfd68eYqOjtaHH36obdu26cSJE/riiy+u+j4XFBQoLy/PagEAAOXTDd3U369fPzVt2lQzZsy4ZFtkZKSGDh2qSZMmKTAwUO3atdObb76pZcuW6ezZs2rUqJE8PT2VkJAgSYqPj9fTTz9teb1jxw4VFRWpXbt2lx3766+/1tq1a1WlShXL+m3btmnHjh1avXq1WrZsqcDAQM2dO1ceHh767LPPJElNmjTRmDFj1KhRIwUGBmr27Nm69957tW7duhKPc9KkSQoODpafn586d+6sl156SatWrbJqU1RUpIULF6ply5Zq3ry5JkyYoLi4OMv2N954QxEREerfv7/q16+vhQsXyt3d/arvcWRkpNzd3S2Lj4/PVfsAAICy6YY/ZTlnzhzFxMTowIEDVuv37Nmj6Ohoubi4WJZu3bqpuLhYhw8flslkUocOHRQfH6+cnBzt379f48aNU0FBgX7++WclJCSoVatWcnJyshp3/fr1mj59upYuXaomTZpcss/8/HxVrlzZar+HDx9Wenq6pAszZOHh4apfv748PDzk4uKiAwcOXHGGbPPmzerSpYtq1qwpV1dXDR8+XNnZ2Tp9+rSljZOTk+69917La29vbx0/flyS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YhQdHW0JriUpKChQXl6e1QIAAMqnm76GuGTJEg0bNkySFBoaqtzcXCUkJKhTp05ydXWVra2tvLy8JF2YHYuJidGnn36qLl26SJKWLl2qGjVqXDJujx49NG7cOEkXZsMWLFigLVu2qG7dupKkadOmWdr6+fkpPDxcK1as0JQpUyzri4uLFR0dbbksOXz4cMXFxenll1++ZH8ZGRlydnZWr1695Orqqlq1aqlZs2aSJHd3d1WoUEFOTk6WY5EkW1tbzZo1y/K6du3aSkpK0qpVqzRw4EDL+kqVKuntt9+Wra2t6tWrp549eyouLk6jRo0q8X2NjIy0GhsAAJRfNzVDlpaWph07dmjIkCGSJDs7Ow0aNEhLliy5bPtff/1VRUVFat26tWWdu7u7JWT9XVBQkOVnk8kkLy8vHT9+3LJu5cqVat++vby8vOTi4qJp06YpIyPDagw/Pz+re8S8vb2txvi7rl27qlatWvL399fw4cP1ySef6PTp01d9D9555x21aNFCVatWlYuLixYtWnRJHQ0bNpStre011XFRRESEcnNzLUtmZuZVawEAAGXTTQWyJUuW6Ny5c6pRo4bs7OxkZ2en9957T59//rlyc3NvqjB7e3ur1yaTScXFxZIufKpz6NCh6tGjh2JjY7V7925NnTpVhYWF1zzGP7m6uurHH3/U8uXL5e3trRdeeEFNmjRRTk5OiTWuWLFC4eHhGjlypL799lulpqbq0Ucfvak6LnJwcJCbm5vVAgAAyqcbvmR57tw5LVu2TPPmzdP9999vta1v375avnz5JX38/f1lb2+vnTt3ytfXV5KUm5urgwcPWu7XuhaJiYmqVauWpk6dall39OjRGzyS/8/Ozk4hISEKCQnRjBkz5OHhoe+++079+/dXhQoVdP78eav227dvV7t27SyXVqUL960BAABcjxsOZLGxsfrrr780cuRIubu7W20bMGCAlixZoqFDh1qtd3V11YgRI/TMM8/I09NT1apV04wZM2RjYyOTyXTN+w4MDFRGRoZWrFihVq1a6euvv9YXX3xxo4diOZ5ff/1VHTp0UKVKlbR+/XoVFxdbLqf6+fkpOTlZR44ckYuLizw9PRUYGKhly5Zp48aNql27tj766CPt3LlTtWvXvqlaAADA3eWGL1kuWbJEISEhl4Qx6UIg27Vr12U/GTh//ny1bdtWvXr1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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.barplot(y=countries, x=lostcount, data=lost)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1952d47b",
   "metadata": {},
   "source": [
    "# \n",
    "According to the above 3 plots England has played most matches, therefore they have won and lost in the same range.\n",
    "Other than England, India and Bangladesh has most wins and New Zealand and India has most loses\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "813f6a79-3933-4672-82f9-fe7cb5a39a0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "valuebr = br"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "5595255d-225f-410e-bb6d-5b39f60f2494",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Country</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Bat1</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Ground</th>\n",
       "      <th>Start Date</th>\n",
       "      <th>Match_ID</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>18</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>1*</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Sharjah</td>\n",
       "      <td>18 Dec 2013</td>\n",
       "      <td>ODI # 3445</td>\n",
       "      <td>311</td>\n",
       "      <td>323.0</td>\n",
       "      <td>49.4</td>\n",
       "      <td>6.26</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>27</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>England</td>\n",
       "      <td>4*</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>The Oval</td>\n",
       "      <td>22 May 2014</td>\n",
       "      <td>ODI # 3492</td>\n",
       "      <td>144</td>\n",
       "      <td>226.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>5.17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dunedin</td>\n",
       "      <td>23 Jan 2015</td>\n",
       "      <td>ODI # 3588</td>\n",
       "      <td>252</td>\n",
       "      <td>361.0</td>\n",
       "      <td>43.4</td>\n",
       "      <td>5.77</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>31</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>60.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dunedin</td>\n",
       "      <td>25 Jan 2015</td>\n",
       "      <td>ODI # 3590</td>\n",
       "      <td>195</td>\n",
       "      <td>316.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>4.81</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>32</td>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>WestIndies</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>7*</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Christchurch</td>\n",
       "      <td>14 Feb 2015</td>\n",
       "      <td>ODI # 3599</td>\n",
       "      <td>233</td>\n",
       "      <td>332.0</td>\n",
       "      <td>46.1</td>\n",
       "      <td>5.04</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>11140</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>17 Sep 2018</td>\n",
       "      <td>ODI # 4038</td>\n",
       "      <td>158</td>\n",
       "      <td>250.0</td>\n",
       "      <td>41.2</td>\n",
       "      <td>3.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>11141</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>42*</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>110.52</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>20 Sep 2018</td>\n",
       "      <td>ODI # 4041</td>\n",
       "      <td>119</td>\n",
       "      <td>256.0</td>\n",
       "      <td>42.1</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>11142</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>10*</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>142.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Abu Dhabi</td>\n",
       "      <td>21 Sep 2018</td>\n",
       "      <td>ODI # 4043</td>\n",
       "      <td>258/7</td>\n",
       "      <td>258.0</td>\n",
       "      <td>49.3</td>\n",
       "      <td>5.21</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>11144</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>India</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Dubai (DSC)</td>\n",
       "      <td>25 Sep 2018</td>\n",
       "      <td>ODI # 4046</td>\n",
       "      <td>252</td>\n",
       "      <td>253.0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>5.05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>tied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>11145</td>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Dehradun</td>\n",
       "      <td>28 Feb 2019</td>\n",
       "      <td>ODI # 4100</td>\n",
       "      <td>165/5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>3.94</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3086 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         ID  Player_ID          Player      Country   Opposition Bat1  Runs  \\\n",
       "7        18      49619   Oshane Thomas   WestIndies     Pakistan   1*     1   \n",
       "9        27      49619   Oshane Thomas   WestIndies      England   4*     4   \n",
       "10       30      49619   Oshane Thomas   WestIndies  New Zealand    0     0   \n",
       "11       31      49619   Oshane Thomas   WestIndies  New Zealand    3     3   \n",
       "12       32      49619   Oshane Thomas   WestIndies  New Zealand   7*     7   \n",
       "...     ...        ...             ...          ...          ...  ...   ...   \n",
       "8810  11140     352048  Gulbadin Naib   Afghanistan    Sri Lanka    4     4   \n",
       "8811  11141     352048  Gulbadin Naib   Afghanistan   Bangladesh  42*    42   \n",
       "8812  11142     352048  Gulbadin Naib   Afghanistan     Pakistan  10*    10   \n",
       "8814  11144     352048  Gulbadin Naib   Afghanistan        India   15    15   \n",
       "8815  11145     352048  Gulbadin Naib   Afghanistan      Ireland   46    46   \n",
       "\n",
       "      BF      SR  4s  6s        Ground   Start Date    Match_ID Team Runs  \\\n",
       "7      1  100.00   0   0       Sharjah  18 Dec 2013  ODI # 3445       311   \n",
       "9      5   80.00   0   0      The Oval  22 May 2014  ODI # 3492       144   \n",
       "10     3    0.00   0   0       Dunedin  23 Jan 2015  ODI # 3588       252   \n",
       "11     5   60.00   0   0       Dunedin  25 Jan 2015  ODI # 3590       195   \n",
       "12    17   41.17   0   0  Christchurch  14 Feb 2015  ODI # 3599       233   \n",
       "...   ..     ...  ..  ..           ...          ...         ...       ...   \n",
       "8810   5   80.00   0   0     Abu Dhabi  17 Sep 2018  ODI # 4038       158   \n",
       "8811  38  110.52   5   0     Abu Dhabi  20 Sep 2018  ODI # 4041       119   \n",
       "8812   7  142.85   1   0     Abu Dhabi  21 Sep 2018  ODI # 4043     258/7   \n",
       "8814  46   32.60   1   0   Dubai (DSC)  25 Sep 2018  ODI # 4046       252   \n",
       "8815  61   75.40   6   1      Dehradun  28 Feb 2019  ODI # 4100     165/5   \n",
       "\n",
       "      Target  Overs   RPO  Inns Result  \n",
       "7      323.0   49.4  6.26   2.0   lost  \n",
       "9      226.0   27.5  5.17   2.0   lost  \n",
       "10     361.0   43.4  5.77   2.0   lost  \n",
       "11     316.0   40.3  4.81   2.0   lost  \n",
       "12     332.0   46.1  5.04   2.0   lost  \n",
       "...      ...    ...   ...   ...    ...  \n",
       "8810   250.0   41.2  3.82   2.0   lost  \n",
       "8811   256.0   42.1  2.82   2.0   lost  \n",
       "8812   258.0   49.3  5.21   2.0    won  \n",
       "8814   253.0   49.5  5.05   2.0   tied  \n",
       "8815   162.0   41.5  3.94   2.0    won  \n",
       "\n",
       "[3086 rows x 20 columns]"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "br"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "6f4f7c05-94b8-46c0-8d42-4a5bb04d24cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4</td>\n",
       "      <td>226.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>361.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "      <td>316.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7</td>\n",
       "      <td>332.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Runs  Target\n",
       "7      1   323.0\n",
       "9      4   226.0\n",
       "10     0   361.0\n",
       "11     3   316.0\n",
       "12     7   332.0"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cd =br[['Runs','Target']]\n",
    "cd.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72df56c9",
   "metadata": {},
   "source": [
    "# Features distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "d3dc11e4-4a94-47df-a276-be79af1b77bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\varshithbr\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n",
      "C:\\Users\\varshithbr\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n",
      "C:\\Users\\varshithbr\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n",
      "C:\\Users\\varshithbr\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.displot(br['BF'])\n",
    "sea.displot(br['Target'])\n",
    "sea.displot(br['SR'])\n",
    "\n",
    "sea.displot(y=br['Country'],kde=True)\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "cf6e207e-4c31-432f-a6ad-c59859d81f78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>49.4</td>\n",
       "      <td>6.26</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>England</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>5.17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>361.0</td>\n",
       "      <td>43.4</td>\n",
       "      <td>5.77</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>60.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>316.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>4.81</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>332.0</td>\n",
       "      <td>46.1</td>\n",
       "      <td>5.04</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>41.2</td>\n",
       "      <td>3.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>110.52</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>42.1</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>142.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>258.7</td>\n",
       "      <td>258.0</td>\n",
       "      <td>49.3</td>\n",
       "      <td>5.21</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>India</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>5.05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>tied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>165.5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>3.94</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Player_ID          Player   Opposition  Runs  BF      SR  4s  6s  \\\n",
       "7         49619   Oshane Thomas     Pakistan     1   1  100.00   0   0   \n",
       "9         49619   Oshane Thomas      England     4   5   80.00   0   0   \n",
       "10        49619   Oshane Thomas  New Zealand     0   3    0.00   0   0   \n",
       "11        49619   Oshane Thomas  New Zealand     3   5   60.00   0   0   \n",
       "12        49619   Oshane Thomas  New Zealand     7  17   41.17   0   0   \n",
       "...         ...             ...          ...   ...  ..     ...  ..  ..   \n",
       "8810     352048  Gulbadin Naib     Sri Lanka     4   5   80.00   0   0   \n",
       "8811     352048  Gulbadin Naib    Bangladesh    42  38  110.52   5   0   \n",
       "8812     352048  Gulbadin Naib      Pakistan    10   7  142.85   1   0   \n",
       "8814     352048  Gulbadin Naib         India    15  46   32.60   1   0   \n",
       "8815     352048  Gulbadin Naib       Ireland    46  61   75.40   6   1   \n",
       "\n",
       "      Team Runs  Target  Overs   RPO  Inns Result  \n",
       "7         311.0   323.0   49.4  6.26   2.0   lost  \n",
       "9         144.0   226.0   27.5  5.17   2.0   lost  \n",
       "10        252.0   361.0   43.4  5.77   2.0   lost  \n",
       "11        195.0   316.0   40.3  4.81   2.0   lost  \n",
       "12        233.0   332.0   46.1  5.04   2.0   lost  \n",
       "...         ...     ...    ...   ...   ...    ...  \n",
       "8810      158.0   250.0   41.2  3.82   2.0   lost  \n",
       "8811      119.0   256.0   42.1  2.82   2.0   lost  \n",
       "8812      258.7   258.0   49.3  5.21   2.0    won  \n",
       "8814      252.0   253.0   49.5  5.05   2.0   tied  \n",
       "8815      165.5   162.0   41.5  3.94   2.0    won  \n",
       "\n",
       "[3080 rows x 14 columns]"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newbr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "9667728e-d2b0-4255-9761-afd88335e345",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before removal (3086, 20)\n",
      "before removal (3080, 20)\n"
     ]
    }
   ],
   "source": [
    "#removing first  5 overs\n",
    "print(\"before removal\",br.shape)\n",
    "br = br[br['Overs'] >=5.0]\n",
    "\n",
    "print(\"before removal\",br.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "a1ea23d0-c5e9-4052-bb33-e97b6024716a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before dropping (3080, 20)\n",
      "after dropping (3080, 14)\n"
     ]
    }
   ],
   "source": [
    "#dropping irrelevant columns\n",
    "print(\"before dropping\",br.shape)\n",
    "newbr=br.drop(columns=['ID','Country','Bat1','Ground','Start Date','Match_ID'])\n",
    "print(\"after dropping\",newbr.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "ee0b9cfa-d3a4-4f14-84a3-80268626c463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5254</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>157</td>\n",
       "      <td>168.0</td>\n",
       "      <td>48.5</td>\n",
       "      <td>3.21</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>England</td>\n",
       "      <td>15</td>\n",
       "      <td>22</td>\n",
       "      <td>68.18</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>316.9</td>\n",
       "      <td>326.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>6.32</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5257</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>England</td>\n",
       "      <td>77</td>\n",
       "      <td>79</td>\n",
       "      <td>97.46</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>157.3</td>\n",
       "      <td>156.0</td>\n",
       "      <td>28.1</td>\n",
       "      <td>5.57</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5258</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>England</td>\n",
       "      <td>26</td>\n",
       "      <td>33</td>\n",
       "      <td>78.78</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>258.5</td>\n",
       "      <td>258.0</td>\n",
       "      <td>47.3</td>\n",
       "      <td>5.43</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5260</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>31</td>\n",
       "      <td>41</td>\n",
       "      <td>75.60</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>305</td>\n",
       "      <td>332.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>6.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5375</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>Australia</td>\n",
       "      <td>46</td>\n",
       "      <td>62</td>\n",
       "      <td>74.19</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>234.3</td>\n",
       "      <td>231.0</td>\n",
       "      <td>49.2</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5377</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>43</td>\n",
       "      <td>45</td>\n",
       "      <td>95.55</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "      <td>325.0</td>\n",
       "      <td>40.2</td>\n",
       "      <td>5.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5379</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>Australia</td>\n",
       "      <td>44</td>\n",
       "      <td>45</td>\n",
       "      <td>97.77</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>240.4</td>\n",
       "      <td>237.0</td>\n",
       "      <td>48.2</td>\n",
       "      <td>4.96</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5381</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>Australia</td>\n",
       "      <td>123</td>\n",
       "      <td>95</td>\n",
       "      <td>129.47</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>281</td>\n",
       "      <td>314.0</td>\n",
       "      <td>48.2</td>\n",
       "      <td>5.81</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5383</th>\n",
       "      <td>253802</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>Australia</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "      <td>90.90</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>237</td>\n",
       "      <td>273.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Player_ID        Player    Opposition  Runs  BF      SR  4s  6s  \\\n",
       "5254     253802  Virat Kohli       Pakistan     7  17   41.17   1   0   \n",
       "5255     253802  Virat Kohli        England    15  22   68.18   1   0   \n",
       "5257     253802  Virat Kohli        England    77  79   97.46   9   2   \n",
       "5258     253802  Virat Kohli        England    26  33   78.78   3   0   \n",
       "5260     253802  Virat Kohli   South Africa    31  41   75.60   2   0   \n",
       "...         ...           ...           ...   ...  ..     ...  ..  ..   \n",
       "5375     253802  Virat Kohli      Australia    46  62   74.19   3   0   \n",
       "5377     253802  Virat Kohli    New Zealand    43  45   95.55   5   0   \n",
       "5379     253802  Virat Kohli      Australia    44  45   97.77   6   1   \n",
       "5381     253802  Virat Kohli      Australia   123  95  129.47  16   1   \n",
       "5383     253802  Virat Kohli      Australia    20  22   90.90   2   0   \n",
       "\n",
       "     Team Runs  Target  Overs   RPO  Inns Result  \n",
       "5254       157   168.0   48.5  3.21   2.0   lost  \n",
       "5255     316.9   326.0   50.0  6.32   2.0   lost  \n",
       "5257     157.3   156.0   28.1  5.57   2.0    won  \n",
       "5258     258.5   258.0   47.3  5.43   2.0    won  \n",
       "5260       305   332.0   50.0   6.1   2.0   lost  \n",
       "...        ...     ...    ...   ...   ...    ...  \n",
       "5375     234.3   231.0   49.2  4.74   2.0    won  \n",
       "5377       234   325.0   40.2   5.8   2.0   lost  \n",
       "5379     240.4   237.0   48.2  4.96   2.0    won  \n",
       "5381       281   314.0   48.2  5.81   2.0   lost  \n",
       "5383       237   273.0   50.0  4.74   2.0   lost  \n",
       "\n",
       "[64 rows x 14 columns]"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newbr['Team Runs'] = newbr['Team Runs'].str.replace('/','.')\n",
    "# newbr['Team Runs'] = pd.to_numeric(newbr['Team Runs'])\n",
    "newdup=newbr.copy()\n",
    "newbr[newbr['Player']=='Virat Kohli ']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78af95e2",
   "metadata": {},
   "source": [
    "# heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "08e76f0a-f34b-4164-a7d0-9f4b320a29c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player_ID       int64\n",
       "Player         object\n",
       "Opposition     object\n",
       "Runs            int64\n",
       "BF              int64\n",
       "SR            float64\n",
       "4s              int64\n",
       "6s              int64\n",
       "Team Runs     float64\n",
       "Target        float64\n",
       "Overs         float64\n",
       "RPO           float64\n",
       "Inns          float64\n",
       "Result         object\n",
       "dtype: object"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newbr['Team Runs'] = newbr['Team Runs'].astype(float)\n",
    "newbr['Inns'] = newbr['Inns'].astype(float)\n",
    "newbr['RPO'] = newbr['RPO'].astype(float)\n",
    "newbr.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "e58f66e3-c381-4935-90bc-12b29fdd52e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Overs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>RPO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49.4</td>\n",
       "      <td>323.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>6.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>226.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>5.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43.4</td>\n",
       "      <td>361.0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>5.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>60.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>316.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>4.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46.1</td>\n",
       "      <td>332.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>5.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>3.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>110.52</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>42.1</td>\n",
       "      <td>256.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>2.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>142.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49.3</td>\n",
       "      <td>258.0</td>\n",
       "      <td>258.7</td>\n",
       "      <td>5.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>253.0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>5.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>41.5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>165.5</td>\n",
       "      <td>3.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Runs  BF      SR  4s  6s  Overs  Target  Team Runs   RPO\n",
       "7        1   1  100.00   0   0   49.4   323.0      311.0  6.26\n",
       "9        4   5   80.00   0   0   27.5   226.0      144.0  5.17\n",
       "10       0   3    0.00   0   0   43.4   361.0      252.0  5.77\n",
       "11       3   5   60.00   0   0   40.3   316.0      195.0  4.81\n",
       "12       7  17   41.17   0   0   46.1   332.0      233.0  5.04\n",
       "...    ...  ..     ...  ..  ..    ...     ...        ...   ...\n",
       "8810     4   5   80.00   0   0   41.2   250.0      158.0  3.82\n",
       "8811    42  38  110.52   5   0   42.1   256.0      119.0  2.82\n",
       "8812    10   7  142.85   1   0   49.3   258.0      258.7  5.21\n",
       "8814    15  46   32.60   1   0   49.5   253.0      252.0  5.05\n",
       "8815    46  61   75.40   6   1   41.5   162.0      165.5  3.94\n",
       "\n",
       "[3080 rows x 9 columns]"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heatbr = newbr[['Runs','BF','SR','4s','6s','Overs','Target','Team Runs','RPO']]\n",
    "\n",
    "heatbr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "376c8f55-a430-4e2d-9135-5bb16f7cca82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Runs           int64\n",
       "BF             int64\n",
       "SR           float64\n",
       "4s             int64\n",
       "6s             int64\n",
       "Overs        float64\n",
       "Target       float64\n",
       "Team Runs    float64\n",
       "RPO          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heatbr.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "bda9b056-63cf-41f7-aeb9-67ee4303bd00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Overs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>RPO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Runs</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.935235</td>\n",
       "      <td>0.322928</td>\n",
       "      <td>0.903920</td>\n",
       "      <td>0.652761</td>\n",
       "      <td>0.124625</td>\n",
       "      <td>0.202519</td>\n",
       "      <td>0.225487</td>\n",
       "      <td>0.176172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BF</th>\n",
       "      <td>0.935235</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.133486</td>\n",
       "      <td>0.809351</td>\n",
       "      <td>0.480938</td>\n",
       "      <td>0.121661</td>\n",
       "      <td>0.106614</td>\n",
       "      <td>0.151285</td>\n",
       "      <td>0.077815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SR</th>\n",
       "      <td>0.322928</td>\n",
       "      <td>0.133486</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.338358</td>\n",
       "      <td>0.385539</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>0.204309</td>\n",
       "      <td>0.210656</td>\n",
       "      <td>0.215499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4s</th>\n",
       "      <td>0.903920</td>\n",
       "      <td>0.809351</td>\n",
       "      <td>0.338358</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.480360</td>\n",
       "      <td>0.070204</td>\n",
       "      <td>0.165656</td>\n",
       "      <td>0.199016</td>\n",
       "      <td>0.198755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6s</th>\n",
       "      <td>0.652761</td>\n",
       "      <td>0.480938</td>\n",
       "      <td>0.385539</td>\n",
       "      <td>0.480360</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.064953</td>\n",
       "      <td>0.202481</td>\n",
       "      <td>0.195296</td>\n",
       "      <td>0.204025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Overs</th>\n",
       "      <td>0.124625</td>\n",
       "      <td>0.121661</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>0.070204</td>\n",
       "      <td>0.064953</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.545685</td>\n",
       "      <td>0.755967</td>\n",
       "      <td>-0.047203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Target</th>\n",
       "      <td>0.202519</td>\n",
       "      <td>0.106614</td>\n",
       "      <td>0.204309</td>\n",
       "      <td>0.165656</td>\n",
       "      <td>0.202481</td>\n",
       "      <td>0.545685</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.645867</td>\n",
       "      <td>0.253239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Team Runs</th>\n",
       "      <td>0.225487</td>\n",
       "      <td>0.151285</td>\n",
       "      <td>0.210656</td>\n",
       "      <td>0.199016</td>\n",
       "      <td>0.195296</td>\n",
       "      <td>0.755967</td>\n",
       "      <td>0.645867</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.583777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RPO</th>\n",
       "      <td>0.176172</td>\n",
       "      <td>0.077815</td>\n",
       "      <td>0.215499</td>\n",
       "      <td>0.198755</td>\n",
       "      <td>0.204025</td>\n",
       "      <td>-0.047203</td>\n",
       "      <td>0.253239</td>\n",
       "      <td>0.583777</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Runs        BF        SR        4s        6s     Overs  \\\n",
       "Runs       1.000000  0.935235  0.322928  0.903920  0.652761  0.124625   \n",
       "BF         0.935235  1.000000  0.133486  0.809351  0.480938  0.121661   \n",
       "SR         0.322928  0.133486  1.000000  0.338358  0.385539  0.079355   \n",
       "4s         0.903920  0.809351  0.338358  1.000000  0.480360  0.070204   \n",
       "6s         0.652761  0.480938  0.385539  0.480360  1.000000  0.064953   \n",
       "Overs      0.124625  0.121661  0.079355  0.070204  0.064953  1.000000   \n",
       "Target     0.202519  0.106614  0.204309  0.165656  0.202481  0.545685   \n",
       "Team Runs  0.225487  0.151285  0.210656  0.199016  0.195296  0.755967   \n",
       "RPO        0.176172  0.077815  0.215499  0.198755  0.204025 -0.047203   \n",
       "\n",
       "             Target  Team Runs       RPO  \n",
       "Runs       0.202519   0.225487  0.176172  \n",
       "BF         0.106614   0.151285  0.077815  \n",
       "SR         0.204309   0.210656  0.215499  \n",
       "4s         0.165656   0.199016  0.198755  \n",
       "6s         0.202481   0.195296  0.204025  \n",
       "Overs      0.545685   0.755967 -0.047203  \n",
       "Target     1.000000   0.645867  0.253239  \n",
       "Team Runs  0.645867   1.000000  0.583777  \n",
       "RPO        0.253239   0.583777  1.000000  "
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heatbr.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "e402646a-52ea-4760-aaa4-58249c9f2fd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from seaborn import heatmap\n",
    "heatmap(data=heatbr.corr(),annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac49cc11",
   "metadata": {},
   "source": [
    "\n",
    "In the above heatmap we get a clear picture of features and its correlations.\n",
    "and here Runs and BF are closely correlated. \n",
    "Which means there will be more impact on Runs by the balls faced than other features\n",
    "Here is a regression  plot of BF and Runs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da7127cd",
   "metadata": {},
   "source": [
    "# Regplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "502ab2dc-d89d-4c61-b5ae-ddf758148ea1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sea.regplot(x=heatbr['BF'],y=heatbr['Runs'],data=heatbr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d516971d",
   "metadata": {},
   "source": [
    "# Encoding using dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "27f2329e-00af-43d2-95af-36887af03e1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player_ID</th>\n",
       "      <th>Player</th>\n",
       "      <th>Opposition</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>49.4</td>\n",
       "      <td>6.26</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>England</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>5.17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>361.0</td>\n",
       "      <td>43.4</td>\n",
       "      <td>5.77</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>60.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>316.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>4.81</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>49619</td>\n",
       "      <td>Oshane Thomas</td>\n",
       "      <td>New Zealand</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>41.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>332.0</td>\n",
       "      <td>46.1</td>\n",
       "      <td>5.04</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>41.2</td>\n",
       "      <td>3.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>110.52</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>42.1</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.0</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>142.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>258.7</td>\n",
       "      <td>258.0</td>\n",
       "      <td>49.3</td>\n",
       "      <td>5.21</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>India</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>32.60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>49.5</td>\n",
       "      <td>5.05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>tied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>352048</td>\n",
       "      <td>Gulbadin Naib</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>75.40</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>165.5</td>\n",
       "      <td>162.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>3.94</td>\n",
       "      <td>2.0</td>\n",
       "      <td>won</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Player_ID          Player   Opposition  Runs  BF      SR  4s  6s  \\\n",
       "7         49619   Oshane Thomas     Pakistan     1   1  100.00   0   0   \n",
       "9         49619   Oshane Thomas      England     4   5   80.00   0   0   \n",
       "10        49619   Oshane Thomas  New Zealand     0   3    0.00   0   0   \n",
       "11        49619   Oshane Thomas  New Zealand     3   5   60.00   0   0   \n",
       "12        49619   Oshane Thomas  New Zealand     7  17   41.17   0   0   \n",
       "...         ...             ...          ...   ...  ..     ...  ..  ..   \n",
       "8810     352048  Gulbadin Naib     Sri Lanka     4   5   80.00   0   0   \n",
       "8811     352048  Gulbadin Naib    Bangladesh    42  38  110.52   5   0   \n",
       "8812     352048  Gulbadin Naib      Pakistan    10   7  142.85   1   0   \n",
       "8814     352048  Gulbadin Naib         India    15  46   32.60   1   0   \n",
       "8815     352048  Gulbadin Naib       Ireland    46  61   75.40   6   1   \n",
       "\n",
       "      Team Runs  Target  Overs   RPO  Inns Result  \n",
       "7         311.0   323.0   49.4  6.26   2.0   lost  \n",
       "9         144.0   226.0   27.5  5.17   2.0   lost  \n",
       "10        252.0   361.0   43.4  5.77   2.0   lost  \n",
       "11        195.0   316.0   40.3  4.81   2.0   lost  \n",
       "12        233.0   332.0   46.1  5.04   2.0   lost  \n",
       "...         ...     ...    ...   ...   ...    ...  \n",
       "8810      158.0   250.0   41.2  3.82   2.0   lost  \n",
       "8811      119.0   256.0   42.1  2.82   2.0   lost  \n",
       "8812      258.7   258.0   49.3  5.21   2.0    won  \n",
       "8814      252.0   253.0   49.5  5.05   2.0   tied  \n",
       "8815      165.5   162.0   41.5  3.94   2.0    won  \n",
       "\n",
       "[3080 rows x 14 columns]"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t3newbr=newbr.copy()\n",
    "t3newbr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "21f9cdaa-d187-465e-a153-00db29e37997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aaron Finch</th>\n",
       "      <th>Abid Ali</th>\n",
       "      <th>Adam Zampa</th>\n",
       "      <th>Adil Rashid</th>\n",
       "      <th>Aftab Alam</th>\n",
       "      <th>Aiden Markram</th>\n",
       "      <th>Alex Carey</th>\n",
       "      <th>Alex Hales</th>\n",
       "      <th>Andile Phehlukwayo</th>\n",
       "      <th>Andre Russell</th>\n",
       "      <th>...</th>\n",
       "      <th>Kenya</th>\n",
       "      <th>New Zealand</th>\n",
       "      <th>P.N.G.</th>\n",
       "      <th>Pakistan</th>\n",
       "      <th>Scotland</th>\n",
       "      <th>South Africa</th>\n",
       "      <th>Sri Lanka</th>\n",
       "      <th>U.A.E.</th>\n",
       "      <th>West Indies</th>\n",
       "      <th>Zimbabwe</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 164 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Aaron Finch   Abid Ali  Adam Zampa  Adil Rashid  Aftab Alam  \\\n",
       "7              0.0       0.0         0.0          0.0         0.0   \n",
       "9              0.0       0.0         0.0          0.0         0.0   \n",
       "10             0.0       0.0         0.0          0.0         0.0   \n",
       "11             0.0       0.0         0.0          0.0         0.0   \n",
       "12             0.0       0.0         0.0          0.0         0.0   \n",
       "...            ...       ...         ...          ...         ...   \n",
       "8810           0.0       0.0         0.0          0.0         0.0   \n",
       "8811           0.0       0.0         0.0          0.0         0.0   \n",
       "8812           0.0       0.0         0.0          0.0         0.0   \n",
       "8814           0.0       0.0         0.0          0.0         0.0   \n",
       "8815           0.0       0.0         0.0          0.0         0.0   \n",
       "\n",
       "      Aiden Markram  Alex Carey   Alex Hales  Andile Phehlukwayo  \\\n",
       "7               0.0          0.0         0.0                 0.0   \n",
       "9               0.0          0.0         0.0                 0.0   \n",
       "10              0.0          0.0         0.0                 0.0   \n",
       "11              0.0          0.0         0.0                 0.0   \n",
       "12              0.0          0.0         0.0                 0.0   \n",
       "...             ...          ...         ...                 ...   \n",
       "8810            0.0          0.0         0.0                 0.0   \n",
       "8811            0.0          0.0         0.0                 0.0   \n",
       "8812            0.0          0.0         0.0                 0.0   \n",
       "8814            0.0          0.0         0.0                 0.0   \n",
       "8815            0.0          0.0         0.0                 0.0   \n",
       "\n",
       "      Andre Russell  ...  Kenya  New Zealand  P.N.G.  Pakistan  Scotland  \\\n",
       "7               0.0  ...    0.0          0.0     0.0       1.0       0.0   \n",
       "9               0.0  ...    0.0          0.0     0.0       0.0       0.0   \n",
       "10              0.0  ...    0.0          1.0     0.0       0.0       0.0   \n",
       "11              0.0  ...    0.0          1.0     0.0       0.0       0.0   \n",
       "12              0.0  ...    0.0          1.0     0.0       0.0       0.0   \n",
       "...             ...  ...    ...          ...     ...       ...       ...   \n",
       "8810            0.0  ...    0.0          0.0     0.0       0.0       0.0   \n",
       "8811            0.0  ...    0.0          0.0     0.0       0.0       0.0   \n",
       "8812            0.0  ...    0.0          0.0     0.0       1.0       0.0   \n",
       "8814            0.0  ...    0.0          0.0     0.0       0.0       0.0   \n",
       "8815            0.0  ...    0.0          0.0     0.0       0.0       0.0   \n",
       "\n",
       "      South Africa  Sri Lanka  U.A.E.  West Indies  Zimbabwe  \n",
       "7              0.0        0.0     0.0          0.0       0.0  \n",
       "9              0.0        0.0     0.0          0.0       0.0  \n",
       "10             0.0        0.0     0.0          0.0       0.0  \n",
       "11             0.0        0.0     0.0          0.0       0.0  \n",
       "12             0.0        0.0     0.0          0.0       0.0  \n",
       "...            ...        ...     ...          ...       ...  \n",
       "8810           0.0        1.0     0.0          0.0       0.0  \n",
       "8811           0.0        0.0     0.0          0.0       0.0  \n",
       "8812           0.0        0.0     0.0          0.0       0.0  \n",
       "8814           0.0        0.0     0.0          0.0       0.0  \n",
       "8815           0.0        0.0     0.0          0.0       0.0  \n",
       "\n",
       "[3080 rows x 164 columns]"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pd.get_dummies(t3newbr['Player']).head()\n",
    "import re\n",
    "\n",
    "dummies = pd.get_dummies(t3newbr[['Player','Opposition']],prefix='').astype(int)\n",
    "dummies.rename(columns=lambda x: re.sub(r'_v', '', x), inplace=True)\n",
    "dummies.rename(columns=lambda y: re.sub(r'_', '', y), inplace=True)\n",
    "# dummies.rename(columns=lambda x: x.replace('_', ''), inplace=True)\n",
    "dummies.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "07a1350f-5678-49aa-b701-a638c93dffe0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aaron Finch</th>\n",
       "      <th>Abid Ali</th>\n",
       "      <th>Adam Zampa</th>\n",
       "      <th>Adil Rashid</th>\n",
       "      <th>Aftab Alam</th>\n",
       "      <th>Aiden Markram</th>\n",
       "      <th>Alex Carey</th>\n",
       "      <th>Alex Hales</th>\n",
       "      <th>Andile Phehlukwayo</th>\n",
       "      <th>Andre Russell</th>\n",
       "      <th>...</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>SR</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Team Runs</th>\n",
       "      <th>Target</th>\n",
       "      <th>Overs</th>\n",
       "      <th>RPO</th>\n",
       "      <th>Inns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.000000</td>\n",
       "      <td>3080.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.018831</td>\n",
       "      <td>0.000649</td>\n",
       "      <td>0.002273</td>\n",
       "      <td>0.007143</td>\n",
       "      <td>0.000974</td>\n",
       "      <td>0.002273</td>\n",
       "      <td>0.004545</td>\n",
       "      <td>0.012662</td>\n",
       "      <td>0.003896</td>\n",
       "      <td>0.003571</td>\n",
       "      <td>...</td>\n",
       "      <td>30.350649</td>\n",
       "      <td>33.857143</td>\n",
       "      <td>82.938256</td>\n",
       "      <td>2.784091</td>\n",
       "      <td>0.604545</td>\n",
       "      <td>226.957435</td>\n",
       "      <td>266.432143</td>\n",
       "      <td>42.081753</td>\n",
       "      <td>5.374513</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.135951</td>\n",
       "      <td>0.025478</td>\n",
       "      <td>0.047627</td>\n",
       "      <td>0.084227</td>\n",
       "      <td>0.031199</td>\n",
       "      <td>0.047627</td>\n",
       "      <td>0.067278</td>\n",
       "      <td>0.111831</td>\n",
       "      <td>0.062307</td>\n",
       "      <td>0.059664</td>\n",
       "      <td>...</td>\n",
       "      <td>33.431132</td>\n",
       "      <td>32.905610</td>\n",
       "      <td>51.666974</td>\n",
       "      <td>3.385554</td>\n",
       "      <td>1.259757</td>\n",
       "      <td>62.996187</td>\n",
       "      <td>66.688949</td>\n",
       "      <td>8.605127</td>\n",
       "      <td>1.057061</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>51.200000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2.390000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>53.330000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>186.200000</td>\n",
       "      <td>227.000000</td>\n",
       "      <td>39.100000</td>\n",
       "      <td>4.680000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>230.800000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>44.500000</td>\n",
       "      <td>5.300000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>104.760000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>267.000000</td>\n",
       "      <td>311.000000</td>\n",
       "      <td>48.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>264.000000</td>\n",
       "      <td>173.000000</td>\n",
       "      <td>460.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>389.000000</td>\n",
       "      <td>445.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>10.130000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 175 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Aaron Finch      Abid Ali   Adam Zampa  Adil Rashid   Aftab Alam  \\\n",
       "count   3080.000000  3080.000000  3080.000000  3080.000000  3080.000000   \n",
       "mean       0.018831     0.000649     0.002273     0.007143     0.000974   \n",
       "std        0.135951     0.025478     0.047627     0.084227     0.031199   \n",
       "min        0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%        0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "50%        0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "75%        0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "max        1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "       Aiden Markram  Alex Carey    Alex Hales  Andile Phehlukwayo  \\\n",
       "count    3080.000000  3080.000000  3080.000000         3080.000000   \n",
       "mean        0.002273     0.004545     0.012662            0.003896   \n",
       "std         0.047627     0.067278     0.111831            0.062307   \n",
       "min         0.000000     0.000000     0.000000            0.000000   \n",
       "25%         0.000000     0.000000     0.000000            0.000000   \n",
       "50%         0.000000     0.000000     0.000000            0.000000   \n",
       "75%         0.000000     0.000000     0.000000            0.000000   \n",
       "max         1.000000     1.000000     1.000000            1.000000   \n",
       "\n",
       "       Andre Russell  ...         Runs           BF           SR           4s  \\\n",
       "count    3080.000000  ...  3080.000000  3080.000000  3080.000000  3080.000000   \n",
       "mean        0.003571  ...    30.350649    33.857143    82.938256     2.784091   \n",
       "std         0.059664  ...    33.431132    32.905610    51.666974     3.385554   \n",
       "min         0.000000  ...     0.000000     1.000000     0.000000     0.000000   \n",
       "25%         0.000000  ...     6.000000     9.000000    53.330000     0.000000   \n",
       "50%         0.000000  ...    19.000000    23.000000    80.000000     2.000000   \n",
       "75%         0.000000  ...    44.000000    49.000000   104.760000     4.000000   \n",
       "max         1.000000  ...   264.000000   173.000000   460.000000    33.000000   \n",
       "\n",
       "                6s    Team Runs       Target        Overs          RPO    Inns  \n",
       "count  3080.000000  3080.000000  3080.000000  3080.000000  3080.000000  3080.0  \n",
       "mean      0.604545   226.957435   266.432143    42.081753     5.374513     2.0  \n",
       "std       1.259757    62.996187    66.688949     8.605127     1.057061     0.0  \n",
       "min       0.000000    51.200000    68.000000     9.500000     2.390000     2.0  \n",
       "25%       0.000000   186.200000   227.000000    39.100000     4.680000     2.0  \n",
       "50%       0.000000   230.800000   270.000000    44.500000     5.300000     2.0  \n",
       "75%       1.000000   267.000000   311.000000    48.500000     6.000000     2.0  \n",
       "max      14.000000   389.000000   445.000000    50.000000    10.130000     2.0  \n",
       "\n",
       "[8 rows x 175 columns]"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "mergfile = pd.concat([dummies,t3newbr],axis='columns')\n",
    "mergfile.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "ea5ef1fc-b9ad-462d-b518-25a94d0bf63d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aaron Finch</th>\n",
       "      <th>Abid Ali</th>\n",
       "      <th>Adam Zampa</th>\n",
       "      <th>Adil Rashid</th>\n",
       "      <th>Aftab Alam</th>\n",
       "      <th>Aiden Markram</th>\n",
       "      <th>Alex Carey</th>\n",
       "      <th>Alex Hales</th>\n",
       "      <th>Andile Phehlukwayo</th>\n",
       "      <th>Andre Russell</th>\n",
       "      <th>...</th>\n",
       "      <th>Pakistan</th>\n",
       "      <th>Scotland</th>\n",
       "      <th>South Africa</th>\n",
       "      <th>Sri Lanka</th>\n",
       "      <th>U.A.E.</th>\n",
       "      <th>West Indies</th>\n",
       "      <th>Zimbabwe</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>Overs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>49.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>43.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>40.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>46.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>41.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>42.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>49.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>49.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>41.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 167 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Aaron Finch   Abid Ali  Adam Zampa  Adil Rashid  Aftab Alam  \\\n",
       "7                0         0           0            0           0   \n",
       "9                0         0           0            0           0   \n",
       "10               0         0           0            0           0   \n",
       "11               0         0           0            0           0   \n",
       "12               0         0           0            0           0   \n",
       "...            ...       ...         ...          ...         ...   \n",
       "8810             0         0           0            0           0   \n",
       "8811             0         0           0            0           0   \n",
       "8812             0         0           0            0           0   \n",
       "8814             0         0           0            0           0   \n",
       "8815             0         0           0            0           0   \n",
       "\n",
       "      Aiden Markram  Alex Carey   Alex Hales  Andile Phehlukwayo  \\\n",
       "7                 0            0           0                   0   \n",
       "9                 0            0           0                   0   \n",
       "10                0            0           0                   0   \n",
       "11                0            0           0                   0   \n",
       "12                0            0           0                   0   \n",
       "...             ...          ...         ...                 ...   \n",
       "8810              0            0           0                   0   \n",
       "8811              0            0           0                   0   \n",
       "8812              0            0           0                   0   \n",
       "8814              0            0           0                   0   \n",
       "8815              0            0           0                   0   \n",
       "\n",
       "      Andre Russell  ...  Pakistan  Scotland  South Africa  Sri Lanka  U.A.E.  \\\n",
       "7                 0  ...         1         0             0          0       0   \n",
       "9                 0  ...         0         0             0          0       0   \n",
       "10                0  ...         0         0             0          0       0   \n",
       "11                0  ...         0         0             0          0       0   \n",
       "12                0  ...         0         0             0          0       0   \n",
       "...             ...  ...       ...       ...           ...        ...     ...   \n",
       "8810              0  ...         0         0             0          1       0   \n",
       "8811              0  ...         0         0             0          0       0   \n",
       "8812              0  ...         1         0             0          0       0   \n",
       "8814              0  ...         0         0             0          0       0   \n",
       "8815              0  ...         0         0             0          0       0   \n",
       "\n",
       "      West Indies  Zimbabwe  Runs  BF  Overs  \n",
       "7               0         0     1   1   49.4  \n",
       "9               0         0     4   5   27.5  \n",
       "10              0         0     0   3   43.4  \n",
       "11              0         0     3   5   40.3  \n",
       "12              0         0     7  17   46.1  \n",
       "...           ...       ...   ...  ..    ...  \n",
       "8810            0         0     4   5   41.2  \n",
       "8811            0         0    42  38   42.1  \n",
       "8812            0         0    10   7   49.3  \n",
       "8814            0         0    15  46   49.5  \n",
       "8815            0         0    46  61   41.5  \n",
       "\n",
       "[3080 rows x 167 columns]"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = mergfile.drop(['Player','Opposition','Result','Inns','4s','6s','Player_ID','SR','RPO','Team Runs','Target'],axis='columns')\n",
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "de7345aa-0b4a-4a8d-be4d-79b5ecd52645",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aaron Finch</th>\n",
       "      <th>Abid Ali</th>\n",
       "      <th>Adam Zampa</th>\n",
       "      <th>Adil Rashid</th>\n",
       "      <th>Aftab Alam</th>\n",
       "      <th>Aiden Markram</th>\n",
       "      <th>Alex Carey</th>\n",
       "      <th>Alex Hales</th>\n",
       "      <th>Andile Phehlukwayo</th>\n",
       "      <th>Andre Russell</th>\n",
       "      <th>...</th>\n",
       "      <th>Pakistan</th>\n",
       "      <th>Scotland</th>\n",
       "      <th>South Africa</th>\n",
       "      <th>Sri Lanka</th>\n",
       "      <th>U.A.E.</th>\n",
       "      <th>West Indies</th>\n",
       "      <th>Zimbabwe</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>Overs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>49.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>43.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>40.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>46.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8810</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>41.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8811</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>38</td>\n",
       "      <td>42.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8812</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>49.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8814</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>46</td>\n",
       "      <td>49.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8815</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>61</td>\n",
       "      <td>41.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3080 rows × 167 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Aaron Finch   Abid Ali  Adam Zampa  Adil Rashid  Aftab Alam  \\\n",
       "7                0         0           0            0           0   \n",
       "9                0         0           0            0           0   \n",
       "10               0         0           0            0           0   \n",
       "11               0         0           0            0           0   \n",
       "12               0         0           0            0           0   \n",
       "...            ...       ...         ...          ...         ...   \n",
       "8810             0         0           0            0           0   \n",
       "8811             0         0           0            0           0   \n",
       "8812             0         0           0            0           0   \n",
       "8814             0         0           0            0           0   \n",
       "8815             0         0           0            0           0   \n",
       "\n",
       "      Aiden Markram  Alex Carey   Alex Hales  Andile Phehlukwayo  \\\n",
       "7                 0            0           0                   0   \n",
       "9                 0            0           0                   0   \n",
       "10                0            0           0                   0   \n",
       "11                0            0           0                   0   \n",
       "12                0            0           0                   0   \n",
       "...             ...          ...         ...                 ...   \n",
       "8810              0            0           0                   0   \n",
       "8811              0            0           0                   0   \n",
       "8812              0            0           0                   0   \n",
       "8814              0            0           0                   0   \n",
       "8815              0            0           0                   0   \n",
       "\n",
       "      Andre Russell  ...  Pakistan  Scotland  South Africa  Sri Lanka  U.A.E.  \\\n",
       "7                 0  ...         1         0             0          0       0   \n",
       "9                 0  ...         0         0             0          0       0   \n",
       "10                0  ...         0         0             0          0       0   \n",
       "11                0  ...         0         0             0          0       0   \n",
       "12                0  ...         0         0             0          0       0   \n",
       "...             ...  ...       ...       ...           ...        ...     ...   \n",
       "8810              0  ...         0         0             0          1       0   \n",
       "8811              0  ...         0         0             0          0       0   \n",
       "8812              0  ...         1         0             0          0       0   \n",
       "8814              0  ...         0         0             0          0       0   \n",
       "8815              0  ...         0         0             0          0       0   \n",
       "\n",
       "      West Indies  Zimbabwe  Runs  BF  Overs  \n",
       "7               0         0     1   1   49.4  \n",
       "9               0         0     4   5   27.5  \n",
       "10              0         0     0   3   43.4  \n",
       "11              0         0     3   5   40.3  \n",
       "12              0         0     7  17   46.1  \n",
       "...           ...       ...   ...  ..    ...  \n",
       "8810            0         0     4   5   41.2  \n",
       "8811            0         0    42  38   42.1  \n",
       "8812            0         0    10   7   49.3  \n",
       "8814            0         0    15  46   49.5  \n",
       "8815            0         0    46  61   41.5  \n",
       "\n",
       "[3080 rows x 167 columns]"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "73853669-1761-4671-a9f2-41ad6baf9784",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Virat Kohli</th>\n",
       "      <th>Pakistan</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>Overs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>49.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>43.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>40.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Virat Kohli   Pakistan  Runs  BF  Overs\n",
       "7              0         1     1   1   49.4\n",
       "9              0         0     4   5   27.5\n",
       "10             0         0     0   3   43.4\n",
       "11             0         0     3   5   40.3"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demo = final[['Virat Kohli ','Pakistan','Runs','BF','Overs']]\n",
    "demo.head(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28ded817",
   "metadata": {},
   "source": [
    "# Training and Testing Model\n",
    "\n",
    "Dividing into X and Y variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "a34f093d-7eda-4a37-bf2e-1546e3014c0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X= demo.drop(['Runs'],axis=1)\n",
    "Y = demo['Runs']\n",
    "train_X, test_X, train_Y,test_Y = train_test_split(X, Y, test_size=0.20, shuffle=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "aea81d7c-c712-4152-b719-8eaad86ab60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "comp=dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbf6e61f",
   "metadata": {},
   "source": [
    "# Prediction\n",
    "\n",
    "Using various types of regressors to get the best accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a79378ce",
   "metadata": {},
   "source": [
    "# Decision Tree Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "id": "1dd6f71e-7263-4717-8575-5b8746dff490",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-23 {color: black;}#sk-container-id-23 pre{padding: 0;}#sk-container-id-23 div.sk-toggleable {background-color: white;}#sk-container-id-23 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-23 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-23 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-23 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-23 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-23 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-23 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-23 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-23 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-23 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-23 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-23 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-23 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-23 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-23 div.sk-item {position: relative;z-index: 1;}#sk-container-id-23 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-23 div.sk-item::before, #sk-container-id-23 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-23 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-23 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-23 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-23 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-23 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-23 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-23 div.sk-label-container {text-align: center;}#sk-container-id-23 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-23 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-23\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" checked><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "tree = DecisionTreeRegressor()\n",
    "# Train Model\n",
    "tree.fit(test_X,test_Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "8cb3d832-641f-47b8-b788-6598f5115573",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree=tree.score(test_X,test_Y)\n",
    "comp['tree']=tree"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d492a4f",
   "metadata": {},
   "source": [
    "# K Neighbors Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "id": "b26069a6-029a-4166-8a73-efab03cfe4d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-24 {color: black;}#sk-container-id-24 pre{padding: 0;}#sk-container-id-24 div.sk-toggleable {background-color: white;}#sk-container-id-24 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-24 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-24 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-24 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-24 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-24 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-24 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-24 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-24 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-24 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-24 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-24 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-24 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-24 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-24 div.sk-item {position: relative;z-index: 1;}#sk-container-id-24 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-24 div.sk-item::before, #sk-container-id-24 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-24 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-24 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-24 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-24 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-24 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-24 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-24 div.sk-label-container {text-align: center;}#sk-container-id-24 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-24 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-24\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" checked><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsRegressor()"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "knr = KNeighborsRegressor()\n",
    "knr.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "id": "6e3c671c-7909-465a-a830-15f3068ab5f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "knr=knr.score(test_X,test_Y)\n",
    "comp['knr']=knr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee2b36b6",
   "metadata": {},
   "source": [
    "# XGBRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "70ba8491-be0d-45a0-92d6-2b584dae433c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-25 {color: black;}#sk-container-id-25 pre{padding: 0;}#sk-container-id-25 div.sk-toggleable {background-color: white;}#sk-container-id-25 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-25 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-25 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-25 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-25 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-25 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-25 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-25 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-25 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-25 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-25 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-25 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-25 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-25 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-25 div.sk-item {position: relative;z-index: 1;}#sk-container-id-25 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-25 div.sk-item::before, #sk-container-id-25 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-25 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-25 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-25 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-25 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-25 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-25 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-25 div.sk-label-container {text-align: center;}#sk-container-id-25 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-25 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-25\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" checked><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBRegressor\n",
    "xgb = XGBRegressor()\n",
    "xgb.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "c23b3664-d9c5-42f7-94aa-788ab442c611",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb=xgb.score(test_X,test_Y)\n",
    "comp['xgb']=xgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "745d7d20",
   "metadata": {},
   "source": [
    "# RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "4348b1d3-95b0-4c0f-aa05-4dca7d069b9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-26 {color: black;}#sk-container-id-26 pre{padding: 0;}#sk-container-id-26 div.sk-toggleable {background-color: white;}#sk-container-id-26 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-26 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-26 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-26 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-26 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-26 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-26 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-26 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-26 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-26 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-26 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-26 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-26 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-26 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-26 div.sk-item {position: relative;z-index: 1;}#sk-container-id-26 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-26 div.sk-item::before, #sk-container-id-26 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-26 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-26 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-26 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-26 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-26 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-26 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-26 div.sk-label-container {text-align: center;}#sk-container-id-26 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-26 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-26\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" checked><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "fors = RandomForestRegressor()\n",
    "fors.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "fd9a968c-0a36-4dc2-a506-a2aa98b51881",
   "metadata": {},
   "outputs": [],
   "source": [
    "fors=fors.score(test_X,test_Y)\n",
    "comp['fors']=fors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1900bc36",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "7c69f44f-db7e-4e53-9304-6a98c75814d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-27 {color: black;}#sk-container-id-27 pre{padding: 0;}#sk-container-id-27 div.sk-toggleable {background-color: white;}#sk-container-id-27 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-27 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-27 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-27 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-27 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-27 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-27 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-27 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-27 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-27 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-27 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-27 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-27 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-27 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-27 div.sk-item {position: relative;z-index: 1;}#sk-container-id-27 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-27 div.sk-item::before, #sk-container-id-27 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-27 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-27 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-27 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-27 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-27 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-27 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-27 div.sk-label-container {text-align: center;}#sk-container-id-27 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-27 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-27\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" checked><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "li=LinearRegression()\n",
    "li.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "id": "60a0c43d-901b-44da-96fb-eb6dc8e9b7bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "li=li.score(test_X,test_Y)\n",
    "comp['li']=li"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9365671",
   "metadata": {},
   "source": [
    "# SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "5491b760-23b7-452f-9ddb-19859a8be937",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-28 {color: black;}#sk-container-id-28 pre{padding: 0;}#sk-container-id-28 div.sk-toggleable {background-color: white;}#sk-container-id-28 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-28 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-28 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-28 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-28 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-28 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-28 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-28 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-28 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-28 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-28 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-28 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-28 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-28 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-28 div.sk-item {position: relative;z-index: 1;}#sk-container-id-28 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-28 div.sk-item::before, #sk-container-id-28 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-28 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-28 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-28 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-28 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-28 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-28 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-28 div.sk-label-container {text-align: center;}#sk-container-id-28 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-28 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-28\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" checked><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVR()"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "sv = SVR()\n",
    "sv.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "a2ce2ed0-26cc-4ec7-ad90-b2fb70df028a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sv=sv.score(test_X,test_Y)\n",
    "comp['sv']=sv"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f40f4f28",
   "metadata": {},
   "source": [
    "# Comparison between Regressors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "a1b2014b-2b05-49fc-a5e4-b7804c5956c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 6 artists>"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "keys = list(comp.keys())\n",
    "val = list(comp.values())\n",
    "plt.bar(keys,val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7543cfd8",
   "metadata": {},
   "source": [
    "\n",
    "After comparison between the  regressors , we can see that Decision Tree Regressor is having the highest accuracy,\n",
    "and which is best for our model. Therefore we choose Decision Tree Regressor "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0327bd3",
   "metadata": {},
   "source": [
    "# Selecting Decision Tree Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "d77c2498-72b9-4421-8ce1-50a83b6233fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-29 {color: black;}#sk-container-id-29 pre{padding: 0;}#sk-container-id-29 div.sk-toggleable {background-color: white;}#sk-container-id-29 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-29 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-29 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-29 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-29 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-29 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-29 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-29 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-29 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-29 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-29 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-29 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-29 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-29 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-29 div.sk-item {position: relative;z-index: 1;}#sk-container-id-29 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-29 div.sk-item::before, #sk-container-id-29 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-29 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-29 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-29 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-29 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-29 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-29 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-29 div.sk-label-container {text-align: center;}#sk-container-id-29 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-29 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-29\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" checked><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "tree = DecisionTreeRegressor()\n",
    "# Train Model\n",
    "tree.fit(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2c4f5a4",
   "metadata": {},
   "source": [
    "# Predicting Runs of a Specific Player\n",
    "\n",
    "It can accept player name and opposition and along with it can can accept how many balls a player might face in a certain\n",
    "over\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "3576f9b4-1095-4667-bedb-5bd94fde6963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the name Rohit Sharma \n",
      "enter opposition team England\n",
      "enter balls faced 93\n",
      "enter the overs 45.1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rohit Sharma 's overall run predicted is [83.] Against England\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\varshithbr\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\base.py:464: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "player = input('enter the name')\n",
    "opposition = input('enter opposition team')\n",
    "demo = final[[player,opposition,'Runs','BF','Overs']]\n",
    "bf=float(input('enter balls faced'))\n",
    "ov=float(input('enter the overs'))\n",
    "tree.fit(test_X,test_Y)\n",
    "preds=tree.predict([[1,1,bf,ov]])\n",
    "preds.astype(int).tolist()\n",
    "\n",
    "print(player+\"'s overall run predicted is\",preds,\"Against\",opposition)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c3951a3",
   "metadata": {},
   "source": [
    "# Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8c52d3d4-29a6-4861-b0c0-d8ddafa21937",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tree' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[13], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m tree\u001b[38;5;241m.\u001b[39mscore(test_X,test_Y)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'tree' is not defined"
     ]
    }
   ],
   "source": [
    "tree.score(test_X,test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba00db8d",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4afe512b",
   "metadata": {},
   "source": [
    "After selecting the most accurate regressor, as given above it gave the total accuracy of 99% which is almost the same as the\n",
    "original value. Therefore our variables got trained well and now it can predict accurate runs with the parameters we provide. \n",
    "By adding more features such as the pitch state, toss results etc, this might make variation in the accuracy therefore we might have to change the regressors based on the value it produces but the predictions can be further  improved "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c461870c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
